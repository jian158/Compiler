Terminals unused in grammar

   STRUCT
   SPACE
   AERROR
   NULLPTR
   EOL


State 78 conflicts: 1 shift/reduce
State 82 conflicts: 21 shift/reduce
State 122 conflicts: 21 shift/reduce, 1 reduce/reduce
State 124 conflicts: 1 shift/reduce, 22 reduce/reduce
State 153 conflicts: 21 shift/reduce
State 154 conflicts: 21 shift/reduce
State 167 conflicts: 1 shift/reduce
State 194 conflicts: 21 shift/reduce
State 195 conflicts: 21 shift/reduce
State 197 conflicts: 21 shift/reduce
State 203 conflicts: 21 shift/reduce
State 211 conflicts: 21 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: ClassDefs

    2 ClassDefs: Class
    3          | Class ClassDefs

    4 Class: CLASS ID LC ClassStms RC
    5      | CLASS ID EXTENDS ID LC ClassStms RC

    6 ClassStms: ClassStm ClassStms
    7          | ClassStm

    8 ClassStm: Fun
    9         | DeclareStm

   10 Fun: VarType ID LP Args RP LC BaseStm RC
   11    | STATIC VarType ID LP Args RP LC BaseStm RC
   12    | ID LP Args RP LC BaseStm RC

   13 VarType: TYPE Arrays
   14        | ID Arrays
   15        | TYPE
   16        | ID

   17 Arrays: LB RB

   18 BaseStm: Lines

   19 Lines: Line
   20      | Line Lines

   21 Line: EMPTY
   22     | IfStm
   23     | WhileStm
   24     | VarStm SEMI
   25     | DeclareStm
   26     | ReturnStm
   27     | BreakStm
   28     | ForStm

   29 BreakStm: BREAK SEMI

   30 IfStm: IF LP BoolExp RP LC BaseStm RC
   31      | IfStm ELIfStm ElseStm

   32 ELIfStm: ELIF LP Exp RP LC BaseStm RC
   33        | EMPTY

   34 ElseStm: ELSE LC BaseStm RC
   35        | EMPTY

   36 WhileStm: WHILE LP BoolExp RP LC BaseStm RC

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

   38 DeclareStm: VarType DeclareVarStm SEMI
   39           | STATIC VarType DeclareVarStm SEMI
   40           | FINAL VarType DeclareVarStm SEMI
   41           | STATIC FINAL VarType DeclareVarStm SEMI

   42 DeclareVarStm: ID
   43              | ID ASSIGNOP Exp
   44              | DeclareVarStm COMMA DeclareVarStm

   45 VarStm: Exp

   46 ReturnStm: RETURN SEMI
   47          | RETURN Exp SEMI

   48 Args: EMPTY
   49     | Arg

   50 Arg: VarType ID
   51    | VarType ID COMMA Arg

   52 BoolExp: Exp RELOP Exp
   53        | Exp AND Exp
   54        | Exp OR Exp

   55 Exp: Constant
   56    | Call
   57    | ID DOT Call
   58    | ClassPointer DOT Call
   59    | IdStm
   60    | Lvalue ASSIGNOP Exp
   61    | Exp PLUS Exp
   62    | Exp MINUS Exp
   63    | BoolExp
   64    | Exp STAR Exp
   65    | Exp DIV Exp
   66    | LP Exp RP
   67    | MINUS Exp
   68    | NOT Exp
   69    | ArrayIndex
   70    | DPLUS IdStm
   71    | IdStm DPLUS
   72    | DMINUS IdStm
   73    | IdStm DMINUS
   74    | NEW Call
   75    | NEW ArrayIndex

   76 IdStm: ID
   77      | ID DOT ID
   78      | ClassPointer DOT ID

   79 ClassPointer: THIS
   80             | SUPER

   81 ArrayIndex: TYPE LB Exp RB
   82           | ID LB Exp RB

   83 Lvalue: ID
   84       | ArrayIndex

   85 Constant: INT
   86         | FLOAT
   87         | BOOL
   88         | STR

   89 Call: ID LP CallArgs RP

   90 CallArgs: EMPTY
   91         | CallArg

   92 CallArg: Exp
   93        | Exp COMMA CallArg

   94 EMPTY: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
STATIC (258) 11 39 41
FINAL (259) 40 41
BREAK (260) 29
TYPE (261) 13 15 81
STRUCT (262)
EXTENDS (263) 5
CLASS (264) 4 5
RETURN (265) 46 47
IF (266) 30
ELSE (267) 34
ELIF (268) 32
FOR (269) 37
WHILE (270) 36
ID (271) 4 5 10 11 12 14 16 42 43 50 51 57 76 77 78 82 83 89
SPACE (272)
SEMI (273) 24 29 37 38 39 40 41 46 47
COMMA (274) 44 51 93
ASSIGNOP (275) 43 60
RELOP (276) 52
DOT (277) 57 58 77 78
NOT (278) 68
LP (279) 10 11 12 30 32 36 37 66 89
RP (280) 10 11 12 30 32 36 37 66 89
LB (281) 17 81 82
RB (282) 17 81 82
LC (283) 4 5 10 11 12 30 32 34 36 37
RC (284) 4 5 10 11 12 30 32 34 36 37
AERROR (285)
DPLUS (286) 70 71
DMINUS (287) 72 73
INT (288) 85
FLOAT (289) 86
NULLPTR (290)
STR (291) 88
BOOL (292) 87
PLUS (293) 61
MINUS (294) 62 67
STAR (295) 64
DIV (296) 65
OR (297) 54
AND (298) 53
EOL (299)
NEW (300) 74 75
THIS (301) 79
SUPER (302) 80


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
Program (49)
    on left: 1, on right: 0
ClassDefs (50)
    on left: 2 3, on right: 1 3
Class (51)
    on left: 4 5, on right: 2 3
ClassStms (52)
    on left: 6 7, on right: 4 5 6
ClassStm (53)
    on left: 8 9, on right: 6 7
Fun (54)
    on left: 10 11 12, on right: 8
VarType (55)
    on left: 13 14 15 16, on right: 10 11 38 39 40 41 50 51
Arrays (56)
    on left: 17, on right: 13 14
BaseStm (57)
    on left: 18, on right: 10 11 12 30 32 34 36 37
Lines (58)
    on left: 19 20, on right: 18 20
Line (59)
    on left: 21 22 23 24 25 26 27 28, on right: 19 20
BreakStm (60)
    on left: 29, on right: 27
IfStm (61)
    on left: 30 31, on right: 22 31
ELIfStm (62)
    on left: 32 33, on right: 31
ElseStm (63)
    on left: 34 35, on right: 31
WhileStm (64)
    on left: 36, on right: 23
ForStm (65)
    on left: 37, on right: 28
DeclareStm (66)
    on left: 38 39 40 41, on right: 9 25
DeclareVarStm (67)
    on left: 42 43 44, on right: 38 39 40 41 44
VarStm (68)
    on left: 45, on right: 24
ReturnStm (69)
    on left: 46 47, on right: 26
Args (70)
    on left: 48 49, on right: 10 11 12
Arg (71)
    on left: 50 51, on right: 49 51
BoolExp (72)
    on left: 52 53 54, on right: 30 36 37 63
Exp (73)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
    73 74 75, on right: 32 37 43 45 47 52 53 54 60 61 62 64 65 66 67
    68 81 82 92 93
IdStm (74)
    on left: 76 77 78, on right: 59 70 71 72 73
ClassPointer (75)
    on left: 79 80, on right: 58 78
ArrayIndex (76)
    on left: 81 82, on right: 69 75 84
Lvalue (77)
    on left: 83 84, on right: 60
Constant (78)
    on left: 85 86 87 88, on right: 55
Call (79)
    on left: 89, on right: 56 57 58 74
CallArgs (80)
    on left: 90 91, on right: 89
CallArg (81)
    on left: 92 93, on right: 91 93
EMPTY (82)
    on left: 94, on right: 21 33 35 48 90


State 0

    0 $accept: . Program $end

    CLASS  shift, and go to state 1

    Program    go to state 2
    ClassDefs  go to state 3
    Class      go to state 4


State 1

    4 Class: CLASS . ID LC ClassStms RC
    5      | CLASS . ID EXTENDS ID LC ClassStms RC

    ID  shift, and go to state 5


State 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


State 3

    1 Program: ClassDefs .

    $default  reduce using rule 1 (Program)


State 4

    2 ClassDefs: Class .
    3          | Class . ClassDefs

    CLASS  shift, and go to state 1

    $default  reduce using rule 2 (ClassDefs)

    ClassDefs  go to state 7
    Class      go to state 4


State 5

    4 Class: CLASS ID . LC ClassStms RC
    5      | CLASS ID . EXTENDS ID LC ClassStms RC

    EXTENDS  shift, and go to state 8
    LC       shift, and go to state 9


State 6

    0 $accept: Program $end .

    $default  accept


State 7

    3 ClassDefs: Class ClassDefs .

    $default  reduce using rule 3 (ClassDefs)


State 8

    5 Class: CLASS ID EXTENDS . ID LC ClassStms RC

    ID  shift, and go to state 10


State 9

    4 Class: CLASS ID LC . ClassStms RC

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    ClassStms   go to state 15
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 10

    5 Class: CLASS ID EXTENDS ID . LC ClassStms RC

    LC  shift, and go to state 20


State 11

   11 Fun: STATIC . VarType ID LP Args RP LC BaseStm RC
   39 DeclareStm: STATIC . VarType DeclareVarStm SEMI
   41           | STATIC . FINAL VarType DeclareVarStm SEMI

    FINAL  shift, and go to state 21
    TYPE   shift, and go to state 13
    ID     shift, and go to state 22

    VarType  go to state 23


State 12

   40 DeclareStm: FINAL . VarType DeclareVarStm SEMI

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 24


State 13

   13 VarType: TYPE . Arrays
   15        | TYPE .

    LB  shift, and go to state 25

    $default  reduce using rule 15 (VarType)

    Arrays  go to state 26


State 14

   12 Fun: ID . LP Args RP LC BaseStm RC
   14 VarType: ID . Arrays
   16        | ID .

    LP  shift, and go to state 27
    LB  shift, and go to state 25

    $default  reduce using rule 16 (VarType)

    Arrays  go to state 28


State 15

    4 Class: CLASS ID LC ClassStms . RC

    RC  shift, and go to state 29


State 16

    6 ClassStms: ClassStm . ClassStms
    7          | ClassStm .

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    $default  reduce using rule 7 (ClassStms)

    ClassStms   go to state 30
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 17

    8 ClassStm: Fun .

    $default  reduce using rule 8 (ClassStm)


State 18

   10 Fun: VarType . ID LP Args RP LC BaseStm RC
   38 DeclareStm: VarType . DeclareVarStm SEMI

    ID  shift, and go to state 31

    DeclareVarStm  go to state 32


State 19

    9 ClassStm: DeclareStm .

    $default  reduce using rule 9 (ClassStm)


State 20

    5 Class: CLASS ID EXTENDS ID LC . ClassStms RC

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    ClassStms   go to state 33
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 21

   41 DeclareStm: STATIC FINAL . VarType DeclareVarStm SEMI

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 34


State 22

   14 VarType: ID . Arrays
   16        | ID .

    LB  shift, and go to state 25

    $default  reduce using rule 16 (VarType)

    Arrays  go to state 28


State 23

   11 Fun: STATIC VarType . ID LP Args RP LC BaseStm RC
   39 DeclareStm: STATIC VarType . DeclareVarStm SEMI

    ID  shift, and go to state 35

    DeclareVarStm  go to state 36


State 24

   40 DeclareStm: FINAL VarType . DeclareVarStm SEMI

    ID  shift, and go to state 37

    DeclareVarStm  go to state 38


State 25

   17 Arrays: LB . RB

    RB  shift, and go to state 39


State 26

   13 VarType: TYPE Arrays .

    $default  reduce using rule 13 (VarType)


State 27

   12 Fun: ID LP . Args RP LC BaseStm RC

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    $default  reduce using rule 94 (EMPTY)

    VarType  go to state 40
    Args     go to state 41
    Arg      go to state 42
    EMPTY    go to state 43


State 28

   14 VarType: ID Arrays .

    $default  reduce using rule 14 (VarType)


State 29

    4 Class: CLASS ID LC ClassStms RC .

    $default  reduce using rule 4 (Class)


State 30

    6 ClassStms: ClassStm ClassStms .

    $default  reduce using rule 6 (ClassStms)


State 31

   10 Fun: VarType ID . LP Args RP LC BaseStm RC
   42 DeclareVarStm: ID .
   43              | ID . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 44
    LP        shift, and go to state 45

    $default  reduce using rule 42 (DeclareVarStm)


State 32

   38 DeclareStm: VarType DeclareVarStm . SEMI
   44 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm

    SEMI   shift, and go to state 46
    COMMA  shift, and go to state 47


State 33

    5 Class: CLASS ID EXTENDS ID LC ClassStms . RC

    RC  shift, and go to state 48


State 34

   41 DeclareStm: STATIC FINAL VarType . DeclareVarStm SEMI

    ID  shift, and go to state 37

    DeclareVarStm  go to state 49


State 35

   11 Fun: STATIC VarType ID . LP Args RP LC BaseStm RC
   42 DeclareVarStm: ID .
   43              | ID . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 44
    LP        shift, and go to state 50

    $default  reduce using rule 42 (DeclareVarStm)


State 36

   39 DeclareStm: STATIC VarType DeclareVarStm . SEMI
   44 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm

    SEMI   shift, and go to state 51
    COMMA  shift, and go to state 47


State 37

   42 DeclareVarStm: ID .
   43              | ID . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 44

    $default  reduce using rule 42 (DeclareVarStm)


State 38

   40 DeclareStm: FINAL VarType DeclareVarStm . SEMI
   44 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm

    SEMI   shift, and go to state 52
    COMMA  shift, and go to state 47


State 39

   17 Arrays: LB RB .

    $default  reduce using rule 17 (Arrays)


State 40

   50 Arg: VarType . ID
   51    | VarType . ID COMMA Arg

    ID  shift, and go to state 53


State 41

   12 Fun: ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 54


State 42

   49 Args: Arg .

    $default  reduce using rule 49 (Args)


State 43

   48 Args: EMPTY .

    $default  reduce using rule 48 (Args)


State 44

   43 DeclareVarStm: ID ASSIGNOP . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 70
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 45

   10 Fun: VarType ID LP . Args RP LC BaseStm RC

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    $default  reduce using rule 94 (EMPTY)

    VarType  go to state 40
    Args     go to state 77
    Arg      go to state 42
    EMPTY    go to state 43


State 46

   38 DeclareStm: VarType DeclareVarStm SEMI .

    $default  reduce using rule 38 (DeclareStm)


State 47

   44 DeclareVarStm: DeclareVarStm COMMA . DeclareVarStm

    ID  shift, and go to state 37

    DeclareVarStm  go to state 78


State 48

    5 Class: CLASS ID EXTENDS ID LC ClassStms RC .

    $default  reduce using rule 5 (Class)


State 49

   41 DeclareStm: STATIC FINAL VarType DeclareVarStm . SEMI
   44 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm

    SEMI   shift, and go to state 79
    COMMA  shift, and go to state 47


State 50

   11 Fun: STATIC VarType ID LP . Args RP LC BaseStm RC

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    $default  reduce using rule 94 (EMPTY)

    VarType  go to state 40
    Args     go to state 80
    Arg      go to state 42
    EMPTY    go to state 43


State 51

   39 DeclareStm: STATIC VarType DeclareVarStm SEMI .

    $default  reduce using rule 39 (DeclareStm)


State 52

   40 DeclareStm: FINAL VarType DeclareVarStm SEMI .

    $default  reduce using rule 40 (DeclareStm)


State 53

   50 Arg: VarType ID .
   51    | VarType ID . COMMA Arg

    COMMA  shift, and go to state 81

    $default  reduce using rule 50 (Arg)


State 54

   12 Fun: ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 82


State 55

   81 ArrayIndex: TYPE . LB Exp RB

    LB  shift, and go to state 83


State 56

   57 Exp: ID . DOT Call
   76 IdStm: ID .
   77      | ID . DOT ID
   82 ArrayIndex: ID . LB Exp RB
   83 Lvalue: ID .
   89 Call: ID . LP CallArgs RP

    DOT  shift, and go to state 84
    LP   shift, and go to state 85
    LB   shift, and go to state 86

    ASSIGNOP  reduce using rule 83 (Lvalue)
    $default  reduce using rule 76 (IdStm)


State 57

   68 Exp: NOT . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 87
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 58

   66 Exp: LP . Exp RP

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 88
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 59

   70 Exp: DPLUS . IdStm

    ID     shift, and go to state 89
    THIS   shift, and go to state 67
    SUPER  shift, and go to state 68

    IdStm         go to state 90
    ClassPointer  go to state 91


State 60

   72 Exp: DMINUS . IdStm

    ID     shift, and go to state 89
    THIS   shift, and go to state 67
    SUPER  shift, and go to state 68

    IdStm         go to state 92
    ClassPointer  go to state 91


State 61

   85 Constant: INT .

    $default  reduce using rule 85 (Constant)


State 62

   86 Constant: FLOAT .

    $default  reduce using rule 86 (Constant)


State 63

   88 Constant: STR .

    $default  reduce using rule 88 (Constant)


State 64

   87 Constant: BOOL .

    $default  reduce using rule 87 (Constant)


State 65

   67 Exp: MINUS . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 93
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 66

   74 Exp: NEW . Call
   75    | NEW . ArrayIndex

    TYPE  shift, and go to state 55
    ID    shift, and go to state 94

    ArrayIndex  go to state 95
    Call        go to state 96


State 67

   79 ClassPointer: THIS .

    $default  reduce using rule 79 (ClassPointer)


State 68

   80 ClassPointer: SUPER .

    $default  reduce using rule 80 (ClassPointer)


State 69

   63 Exp: BoolExp .

    $default  reduce using rule 63 (Exp)


State 70

   43 DeclareVarStm: ID ASSIGNOP Exp .
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103

    $default  reduce using rule 43 (DeclareVarStm)


State 71

   59 Exp: IdStm .
   71    | IdStm . DPLUS
   73    | IdStm . DMINUS

    DPLUS   shift, and go to state 104
    DMINUS  shift, and go to state 105

    $default  reduce using rule 59 (Exp)


State 72

   58 Exp: ClassPointer . DOT Call
   78 IdStm: ClassPointer . DOT ID

    DOT  shift, and go to state 106


State 73

   69 Exp: ArrayIndex .
   84 Lvalue: ArrayIndex .

    ASSIGNOP  reduce using rule 84 (Lvalue)
    $default  reduce using rule 69 (Exp)


State 74

   60 Exp: Lvalue . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 107


State 75

   55 Exp: Constant .

    $default  reduce using rule 55 (Exp)


State 76

   56 Exp: Call .

    $default  reduce using rule 56 (Exp)


State 77

   10 Fun: VarType ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 108


State 78

   44 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm
   44              | DeclareVarStm COMMA DeclareVarStm .

    COMMA  shift, and go to state 47

    COMMA     [reduce using rule 44 (DeclareVarStm)]
    $default  reduce using rule 44 (DeclareVarStm)


State 79

   41 DeclareStm: STATIC FINAL VarType DeclareVarStm SEMI .

    $default  reduce using rule 41 (DeclareStm)


State 80

   11 Fun: STATIC VarType ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 109


State 81

   51 Arg: VarType ID COMMA . Arg

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 40
    Arg      go to state 110


State 82

   12 Fun: ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 120
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 83

   81 ArrayIndex: TYPE LB . Exp RB

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 132
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 84

   57 Exp: ID DOT . Call
   77 IdStm: ID DOT . ID

    ID  shift, and go to state 133

    Call  go to state 134


State 85

   89 Call: ID LP . CallArgs RP

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    $default  reduce using rule 94 (EMPTY)

    BoolExp       go to state 69
    Exp           go to state 135
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    CallArgs      go to state 136
    CallArg       go to state 137
    EMPTY         go to state 138


State 86

   82 ArrayIndex: ID LB . Exp RB

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 139
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 87

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   68    | NOT Exp .

    $default  reduce using rule 68 (Exp)


State 88

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   66    | LP Exp . RP

    RELOP  shift, and go to state 97
    RP     shift, and go to state 140
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 89

   76 IdStm: ID .
   77      | ID . DOT ID

    DOT  shift, and go to state 141

    $default  reduce using rule 76 (IdStm)


State 90

   70 Exp: DPLUS IdStm .

    $default  reduce using rule 70 (Exp)


State 91

   78 IdStm: ClassPointer . DOT ID

    DOT  shift, and go to state 142


State 92

   72 Exp: DMINUS IdStm .

    $default  reduce using rule 72 (Exp)


State 93

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   67    | MINUS Exp .

    STAR  shift, and go to state 100
    DIV   shift, and go to state 101

    $default  reduce using rule 67 (Exp)


State 94

   82 ArrayIndex: ID . LB Exp RB
   89 Call: ID . LP CallArgs RP

    LP  shift, and go to state 85
    LB  shift, and go to state 86


State 95

   75 Exp: NEW ArrayIndex .

    $default  reduce using rule 75 (Exp)


State 96

   74 Exp: NEW Call .

    $default  reduce using rule 74 (Exp)


State 97

   52 BoolExp: Exp RELOP . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 143
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 98

   61 Exp: Exp PLUS . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 144
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 99

   62 Exp: Exp MINUS . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 145
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 100

   64 Exp: Exp STAR . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 146
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 101

   65 Exp: Exp DIV . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 147
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 102

   54 BoolExp: Exp OR . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 148
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 103

   53 BoolExp: Exp AND . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 149
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 104

   71 Exp: IdStm DPLUS .

    $default  reduce using rule 71 (Exp)


State 105

   73 Exp: IdStm DMINUS .

    $default  reduce using rule 73 (Exp)


State 106

   58 Exp: ClassPointer DOT . Call
   78 IdStm: ClassPointer DOT . ID

    ID  shift, and go to state 150

    Call  go to state 151


State 107

   60 Exp: Lvalue ASSIGNOP . Exp

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 152
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 108

   10 Fun: VarType ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 153


State 109

   11 Fun: STATIC VarType ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 154


State 110

   51 Arg: VarType ID COMMA Arg .

    $default  reduce using rule 51 (Arg)


State 111

   39 DeclareStm: STATIC . VarType DeclareVarStm SEMI
   41           | STATIC . FINAL VarType DeclareVarStm SEMI

    FINAL  shift, and go to state 21
    TYPE   shift, and go to state 13
    ID     shift, and go to state 22

    VarType  go to state 155


State 112

   29 BreakStm: BREAK . SEMI

    SEMI  shift, and go to state 156


State 113

   13 VarType: TYPE . Arrays
   15        | TYPE .
   81 ArrayIndex: TYPE . LB Exp RB

    LB  shift, and go to state 157

    $default  reduce using rule 15 (VarType)

    Arrays  go to state 26


State 114

   46 ReturnStm: RETURN . SEMI
   47          | RETURN . Exp SEMI

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    SEMI    shift, and go to state 158
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 159
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 115

   30 IfStm: IF . LP BoolExp RP LC BaseStm RC

    LP  shift, and go to state 160


State 116

   37 ForStm: FOR . LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

    LP  shift, and go to state 161


State 117

   36 WhileStm: WHILE . LP BoolExp RP LC BaseStm RC

    LP  shift, and go to state 162


State 118

   14 VarType: ID . Arrays
   16        | ID .
   57 Exp: ID . DOT Call
   76 IdStm: ID .
   77      | ID . DOT ID
   82 ArrayIndex: ID . LB Exp RB
   83 Lvalue: ID .
   89 Call: ID . LP CallArgs RP

    DOT  shift, and go to state 84
    LP   shift, and go to state 85
    LB   shift, and go to state 163

    ID        reduce using rule 16 (VarType)
    ASSIGNOP  reduce using rule 83 (Lvalue)
    $default  reduce using rule 76 (IdStm)

    Arrays  go to state 28


State 119

   38 DeclareStm: VarType . DeclareVarStm SEMI

    ID  shift, and go to state 37

    DeclareVarStm  go to state 32


State 120

   12 Fun: ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 164


State 121

   18 BaseStm: Lines .

    $default  reduce using rule 18 (BaseStm)


State 122

   19 Lines: Line .
   20      | Line . Lines

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    RC        reduce using rule 19 (Lines)
    RC        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 19 (Lines)

    VarType       go to state 119
    Lines         go to state 165
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 123

   27 Line: BreakStm .

    $default  reduce using rule 27 (Line)


State 124

   22 Line: IfStm .
   31 IfStm: IfStm . ELIfStm ElseStm

    ELIF  shift, and go to state 166

    STATIC    reduce using rule 22 (Line)
    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     reduce using rule 22 (Line)
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     reduce using rule 22 (Line)
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      reduce using rule 22 (Line)
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    reduce using rule 22 (Line)
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        reduce using rule 22 (Line)
    IF        [reduce using rule 94 (EMPTY)]
    ELSE      reduce using rule 94 (EMPTY)
    ELIF      [reduce using rule 94 (EMPTY)]
    FOR       reduce using rule 22 (Line)
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     reduce using rule 22 (Line)
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        reduce using rule 22 (Line)
    ID        [reduce using rule 94 (EMPTY)]
    NOT       reduce using rule 22 (Line)
    NOT       [reduce using rule 94 (EMPTY)]
    LP        reduce using rule 22 (Line)
    LP        [reduce using rule 94 (EMPTY)]
    RC        reduce using rule 22 (Line)
    RC        [reduce using rule 94 (EMPTY)]
    DPLUS     reduce using rule 22 (Line)
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    reduce using rule 22 (Line)
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       reduce using rule 22 (Line)
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     reduce using rule 22 (Line)
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       reduce using rule 22 (Line)
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      reduce using rule 22 (Line)
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     reduce using rule 22 (Line)
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       reduce using rule 22 (Line)
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      reduce using rule 22 (Line)
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     reduce using rule 22 (Line)
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 22 (Line)

    ELIfStm  go to state 167
    EMPTY    go to state 168


State 125

   23 Line: WhileStm .

    $default  reduce using rule 23 (Line)


State 126

   28 Line: ForStm .

    $default  reduce using rule 28 (Line)


State 127

   25 Line: DeclareStm .

    $default  reduce using rule 25 (Line)


State 128

   24 Line: VarStm . SEMI

    SEMI  shift, and go to state 169


State 129

   26 Line: ReturnStm .

    $default  reduce using rule 26 (Line)


State 130

   45 VarStm: Exp .
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103

    $default  reduce using rule 45 (VarStm)


State 131

   21 Line: EMPTY .

    $default  reduce using rule 21 (Line)


State 132

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   81 ArrayIndex: TYPE LB Exp . RB

    RELOP  shift, and go to state 97
    RB     shift, and go to state 170
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 133

   77 IdStm: ID DOT ID .
   89 Call: ID . LP CallArgs RP

    LP  shift, and go to state 85

    $default  reduce using rule 77 (IdStm)


State 134

   57 Exp: ID DOT Call .

    $default  reduce using rule 57 (Exp)


State 135

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   92 CallArg: Exp .
   93        | Exp . COMMA CallArg

    COMMA  shift, and go to state 171
    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103

    $default  reduce using rule 92 (CallArg)


State 136

   89 Call: ID LP CallArgs . RP

    RP  shift, and go to state 172


State 137

   91 CallArgs: CallArg .

    $default  reduce using rule 91 (CallArgs)


State 138

   90 CallArgs: EMPTY .

    $default  reduce using rule 90 (CallArgs)


State 139

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   82 ArrayIndex: ID LB Exp . RB

    RELOP  shift, and go to state 97
    RB     shift, and go to state 173
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 140

   66 Exp: LP Exp RP .

    $default  reduce using rule 66 (Exp)


State 141

   77 IdStm: ID DOT . ID

    ID  shift, and go to state 174


State 142

   78 IdStm: ClassPointer DOT . ID

    ID  shift, and go to state 175


State 143

   52 BoolExp: Exp . RELOP Exp
   52        | Exp RELOP Exp .
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101

    $default  reduce using rule 52 (BoolExp)


State 144

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   61    | Exp PLUS Exp .
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    STAR  shift, and go to state 100
    DIV   shift, and go to state 101

    $default  reduce using rule 61 (Exp)


State 145

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   62    | Exp MINUS Exp .
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    STAR  shift, and go to state 100
    DIV   shift, and go to state 101

    $default  reduce using rule 62 (Exp)


State 146

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   64    | Exp STAR Exp .
   65    | Exp . DIV Exp

    $default  reduce using rule 64 (Exp)


State 147

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp
   65    | Exp DIV Exp .

    $default  reduce using rule 65 (Exp)


State 148

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   54        | Exp OR Exp .
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    AND    shift, and go to state 103

    $default  reduce using rule 54 (BoolExp)


State 149

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   53        | Exp AND Exp .
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101

    $default  reduce using rule 53 (BoolExp)


State 150

   78 IdStm: ClassPointer DOT ID .
   89 Call: ID . LP CallArgs RP

    LP  shift, and go to state 85

    $default  reduce using rule 78 (IdStm)


State 151

   58 Exp: ClassPointer DOT Call .

    $default  reduce using rule 58 (Exp)


State 152

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   60 Exp: Lvalue ASSIGNOP Exp .
   61    | Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103

    $default  reduce using rule 60 (Exp)


State 153

   10 Fun: VarType ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 176
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 154

   11 Fun: STATIC VarType ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 177
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 155

   39 DeclareStm: STATIC VarType . DeclareVarStm SEMI

    ID  shift, and go to state 37

    DeclareVarStm  go to state 36


State 156

   29 BreakStm: BREAK SEMI .

    $default  reduce using rule 29 (BreakStm)


State 157

   17 Arrays: LB . RB
   81 ArrayIndex: TYPE LB . Exp RB

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    RB      shift, and go to state 39
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 132
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 158

   46 ReturnStm: RETURN SEMI .

    $default  reduce using rule 46 (ReturnStm)


State 159

   47 ReturnStm: RETURN Exp . SEMI
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    SEMI   shift, and go to state 178
    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 160

   30 IfStm: IF LP . BoolExp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 179
    Exp           go to state 180
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 161

   37 ForStm: FOR LP . Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 181
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 162

   36 WhileStm: WHILE LP . BoolExp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 182
    Exp           go to state 180
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 163

   17 Arrays: LB . RB
   82 ArrayIndex: ID LB . Exp RB

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    RB      shift, and go to state 39
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 139
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 164

   12 Fun: ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 12 (Fun)


State 165

   20 Lines: Line Lines .

    $default  reduce using rule 20 (Lines)


State 166

   32 ELIfStm: ELIF . LP Exp RP LC BaseStm RC

    LP  shift, and go to state 183


State 167

   31 IfStm: IfStm ELIfStm . ElseStm

    ELSE  shift, and go to state 184

    ELSE      [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    ElseStm  go to state 185
    EMPTY    go to state 186


State 168

   33 ELIfStm: EMPTY .

    $default  reduce using rule 33 (ELIfStm)


State 169

   24 Line: VarStm SEMI .

    $default  reduce using rule 24 (Line)


State 170

   81 ArrayIndex: TYPE LB Exp RB .

    $default  reduce using rule 81 (ArrayIndex)


State 171

   93 CallArg: Exp COMMA . CallArg

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 135
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    CallArg       go to state 187


State 172

   89 Call: ID LP CallArgs RP .

    $default  reduce using rule 89 (Call)


State 173

   82 ArrayIndex: ID LB Exp RB .

    $default  reduce using rule 82 (ArrayIndex)


State 174

   77 IdStm: ID DOT ID .

    $default  reduce using rule 77 (IdStm)


State 175

   78 IdStm: ClassPointer DOT ID .

    $default  reduce using rule 78 (IdStm)


State 176

   10 Fun: VarType ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 188


State 177

   11 Fun: STATIC VarType ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 189


State 178

   47 ReturnStm: RETURN Exp SEMI .

    $default  reduce using rule 47 (ReturnStm)


State 179

   30 IfStm: IF LP BoolExp . RP LC BaseStm RC
   63 Exp: BoolExp .

    RP  shift, and go to state 190

    $default  reduce using rule 63 (Exp)


State 180

   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 181

   37 ForStm: FOR LP Exp . SEMI BoolExp SEMI Exp RP LC BaseStm RC
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    SEMI   shift, and go to state 191
    RELOP  shift, and go to state 97
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 182

   36 WhileStm: WHILE LP BoolExp . RP LC BaseStm RC
   63 Exp: BoolExp .

    RP  shift, and go to state 192

    $default  reduce using rule 63 (Exp)


State 183

   32 ELIfStm: ELIF LP . Exp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 193
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 184

   34 ElseStm: ELSE . LC BaseStm RC

    LC  shift, and go to state 194


State 185

   31 IfStm: IfStm ELIfStm ElseStm .

    $default  reduce using rule 31 (IfStm)


State 186

   35 ElseStm: EMPTY .

    $default  reduce using rule 35 (ElseStm)


State 187

   93 CallArg: Exp COMMA CallArg .

    $default  reduce using rule 93 (CallArg)


State 188

   10 Fun: VarType ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 10 (Fun)


State 189

   11 Fun: STATIC VarType ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 11 (Fun)


State 190

   30 IfStm: IF LP BoolExp RP . LC BaseStm RC

    LC  shift, and go to state 195


State 191

   37 ForStm: FOR LP Exp SEMI . BoolExp SEMI Exp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 196
    Exp           go to state 180
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 192

   36 WhileStm: WHILE LP BoolExp RP . LC BaseStm RC

    LC  shift, and go to state 197


State 193

   32 ELIfStm: ELIF LP Exp . RP LC BaseStm RC
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    RP     shift, and go to state 198
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 194

   34 ElseStm: ELSE LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 199
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 195

   30 IfStm: IF LP BoolExp RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 200
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 196

   37 ForStm: FOR LP Exp SEMI BoolExp . SEMI Exp RP LC BaseStm RC
   63 Exp: BoolExp .

    SEMI  shift, and go to state 201

    $default  reduce using rule 63 (Exp)


State 197

   36 WhileStm: WHILE LP BoolExp RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 202
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 198

   32 ELIfStm: ELIF LP Exp RP . LC BaseStm RC

    LC  shift, and go to state 203


State 199

   34 ElseStm: ELSE LC BaseStm . RC

    RC  shift, and go to state 204


State 200

   30 IfStm: IF LP BoolExp RP LC BaseStm . RC

    RC  shift, and go to state 205


State 201

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI . Exp RP LC BaseStm RC

    TYPE    shift, and go to state 55
    ID      shift, and go to state 56
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    BoolExp       go to state 69
    Exp           go to state 206
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76


State 202

   36 WhileStm: WHILE LP BoolExp RP LC BaseStm . RC

    RC  shift, and go to state 207


State 203

   32 ELIfStm: ELIF LP Exp RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 208
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 204

   34 ElseStm: ELSE LC BaseStm RC .

    $default  reduce using rule 34 (ElseStm)


State 205

   30 IfStm: IF LP BoolExp RP LC BaseStm RC .

    $default  reduce using rule 30 (IfStm)


State 206

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp . RP LC BaseStm RC
   52 BoolExp: Exp . RELOP Exp
   53        | Exp . AND Exp
   54        | Exp . OR Exp
   61 Exp: Exp . PLUS Exp
   62    | Exp . MINUS Exp
   64    | Exp . STAR Exp
   65    | Exp . DIV Exp

    RELOP  shift, and go to state 97
    RP     shift, and go to state 209
    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99
    STAR   shift, and go to state 100
    DIV    shift, and go to state 101
    OR     shift, and go to state 102
    AND    shift, and go to state 103


State 207

   36 WhileStm: WHILE LP BoolExp RP LC BaseStm RC .

    $default  reduce using rule 36 (WhileStm)


State 208

   32 ELIfStm: ELIF LP Exp RP LC BaseStm . RC

    RC  shift, and go to state 210


State 209

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP . LC BaseStm RC

    LC  shift, and go to state 211


State 210

   32 ELIfStm: ELIF LP Exp RP LC BaseStm RC .

    $default  reduce using rule 32 (ELIfStm)


State 211

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC . BaseStm RC

    STATIC  shift, and go to state 111
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 112
    TYPE    shift, and go to state 113
    RETURN  shift, and go to state 114
    IF      shift, and go to state 115
    FOR     shift, and go to state 116
    WHILE   shift, and go to state 117
    ID      shift, and go to state 118
    NOT     shift, and go to state 57
    LP      shift, and go to state 58
    DPLUS   shift, and go to state 59
    DMINUS  shift, and go to state 60
    INT     shift, and go to state 61
    FLOAT   shift, and go to state 62
    STR     shift, and go to state 63
    BOOL    shift, and go to state 64
    MINUS   shift, and go to state 65
    NEW     shift, and go to state 66
    THIS    shift, and go to state 67
    SUPER   shift, and go to state 68

    STATIC    [reduce using rule 94 (EMPTY)]
    FINAL     [reduce using rule 94 (EMPTY)]
    BREAK     [reduce using rule 94 (EMPTY)]
    TYPE      [reduce using rule 94 (EMPTY)]
    RETURN    [reduce using rule 94 (EMPTY)]
    IF        [reduce using rule 94 (EMPTY)]
    FOR       [reduce using rule 94 (EMPTY)]
    WHILE     [reduce using rule 94 (EMPTY)]
    ID        [reduce using rule 94 (EMPTY)]
    NOT       [reduce using rule 94 (EMPTY)]
    LP        [reduce using rule 94 (EMPTY)]
    DPLUS     [reduce using rule 94 (EMPTY)]
    DMINUS    [reduce using rule 94 (EMPTY)]
    INT       [reduce using rule 94 (EMPTY)]
    FLOAT     [reduce using rule 94 (EMPTY)]
    STR       [reduce using rule 94 (EMPTY)]
    BOOL      [reduce using rule 94 (EMPTY)]
    MINUS     [reduce using rule 94 (EMPTY)]
    NEW       [reduce using rule 94 (EMPTY)]
    THIS      [reduce using rule 94 (EMPTY)]
    SUPER     [reduce using rule 94 (EMPTY)]
    $default  reduce using rule 94 (EMPTY)

    VarType       go to state 119
    BaseStm       go to state 212
    Lines         go to state 121
    Line          go to state 122
    BreakStm      go to state 123
    IfStm         go to state 124
    WhileStm      go to state 125
    ForStm        go to state 126
    DeclareStm    go to state 127
    VarStm        go to state 128
    ReturnStm     go to state 129
    BoolExp       go to state 69
    Exp           go to state 130
    IdStm         go to state 71
    ClassPointer  go to state 72
    ArrayIndex    go to state 73
    Lvalue        go to state 74
    Constant      go to state 75
    Call          go to state 76
    EMPTY         go to state 131


State 212

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm . RC

    RC  shift, and go to state 213


State 213

   37 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC .

    $default  reduce using rule 37 (ForStm)
