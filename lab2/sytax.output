Terminals unused in grammar

   STRUCT
   SPACE
   AERROR
   NULLPTR
   EOL


State 103 conflicts: 1 shift/reduce
State 112 conflicts: 1 reduce/reduce
State 131 conflicts: 21 shift/reduce
State 149 conflicts: 21 shift/reduce, 1 reduce/reduce
State 151 conflicts: 1 shift/reduce, 22 reduce/reduce
State 158 conflicts: 21 shift/reduce
State 159 conflicts: 21 shift/reduce
State 172 conflicts: 1 shift/reduce
State 192 conflicts: 21 shift/reduce
State 193 conflicts: 21 shift/reduce
State 195 conflicts: 21 shift/reduce
State 201 conflicts: 21 shift/reduce
State 209 conflicts: 21 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: ClassDefs

    2 ClassDefs: Class
    3          | Class ClassDefs

    4 Class: CLASS ID LC ClassStms RC
    5      | CLASS ID EXTENDS ID LC ClassStms RC

    6 ClassStms: ClassStm ClassStms
    7          | ClassStm

    8 ClassStm: Fun
    9         | DeclareStm

   10 Fun: VarType ID LP Args RP LC BaseStm RC
   11    | STATIC VarType ID LP Args RP LC BaseStm RC
   12    | ID LP Args RP LC BaseStm RC

   13 VarType: TYPE Arrays
   14        | ID Arrays
   15        | TYPE
   16        | ID

   17 Arrays: ARRAY
   18       | ARRAY Arrays

   19 BaseStm: Lines

   20 Lines: Line
   21      | Line Lines

   22 Line: EMPTY
   23     | IfStm
   24     | WhileStm
   25     | VarStm SEMI
   26     | DeclareStm
   27     | ReturnStm
   28     | BreakStm
   29     | ForStm

   30 BreakStm: BREAK SEMI

   31 IfStm: IF LP BoolExp RP LC BaseStm RC
   32      | IfStm ELIfStm ElseStm

   33 ELIfStm: ELIF LP Exp RP LC BaseStm RC
   34        | EMPTY

   35 ElseStm: ELSE LC BaseStm RC
   36        | EMPTY

   37 WhileStm: WHILE LP BoolExp RP LC BaseStm RC

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

   39 DeclareStm: VarType DeclareVarStm SEMI
   40           | STATIC VarType VarStm SEMI
   41           | FINAL VarType VarStm SEMI
   42           | STATIC FINAL VarType VarStm SEMI

   43 DeclareVarStm: ID
   44              | ID ASSIGNOP Exp
   45              | DeclareVarStm COMMA DeclareVarStm

   46 VarStm: Exp
   47       | Exp COMMA VarStm

   48 ReturnStm: RETURN SEMI
   49          | RETURN Exp SEMI

   50 Args: EMPTY
   51     | Arg

   52 Arg: VarType ID
   53    | VarType ID COMMA Arg

   54 BoolExp: Exp RELOP Exp
   55        | Exp AND Exp
   56        | Exp OR Exp

   57 Exp: Constant
   58    | Call
   59    | ID DOT Call
   60    | ClassPointer DOT Call
   61    | IdStm
   62    | Lvalue ASSIGNOP Exp
   63    | Exp PLUS Exp
   64    | Exp MINUS Exp
   65    | BoolExp
   66    | Exp STAR Exp
   67    | Exp DIV Exp
   68    | LP Exp RP
   69    | MINUS Exp
   70    | NOT Exp
   71    | ID ArrayIndex
   72    | DPLUS IdStm
   73    | IdStm DPLUS
   74    | DMINUS IdStm
   75    | IdStm DMINUS
   76    | NEW Call
   77    | NEW TYPE ArrayIndex

   78 IdStm: ID
   79      | ID DOT ID
   80      | ClassPointer DOT ID

   81 ClassPointer: THIS
   82             | SUPER

   83 ArrayIndex: LB Exp RB
   84           | LB Exp RB ArrayIndex

   85 Lvalue: ID
   86       | ID ArrayIndex

   87 Constant: INT
   88         | FLOAT
   89         | BOOL
   90         | STR

   91 Call: ID LP CallArgs RP

   92 CallArgs: EMPTY
   93         | CallArg

   94 CallArg: Exp
   95        | Exp COMMA CallArg

   96 EMPTY: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
STATIC (258) 11 40 42
ARRAY (259) 17 18
FINAL (260) 41 42
BREAK (261) 30
TYPE (262) 13 15 77
STRUCT (263)
EXTENDS (264) 5
CLASS (265) 4 5
RETURN (266) 48 49
IF (267) 31
ELSE (268) 35
ELIF (269) 33
FOR (270) 38
WHILE (271) 37
ID (272) 4 5 10 11 12 14 16 43 44 52 53 59 71 78 79 80 85 86 91
SPACE (273)
SEMI (274) 25 30 38 39 40 41 42 48 49
COMMA (275) 45 47 53 95
ASSIGNOP (276) 44 62
RELOP (277) 54
DOT (278) 59 60 79 80
NOT (279) 70
LP (280) 10 11 12 31 33 37 38 68 91
RP (281) 10 11 12 31 33 37 38 68 91
LB (282) 83 84
RB (283) 83 84
LC (284) 4 5 10 11 12 31 33 35 37 38
RC (285) 4 5 10 11 12 31 33 35 37 38
AERROR (286)
DPLUS (287) 72 73
DMINUS (288) 74 75
INT (289) 87
FLOAT (290) 88
NULLPTR (291)
STR (292) 90
BOOL (293) 89
PLUS (294) 63
MINUS (295) 64 69
STAR (296) 66
DIV (297) 67
OR (298) 56
AND (299) 55
EOL (300)
NEW (301) 76 77
THIS (302) 81
SUPER (303) 82


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
Program (50)
    on left: 1, on right: 0
ClassDefs (51)
    on left: 2 3, on right: 1 3
Class (52)
    on left: 4 5, on right: 2 3
ClassStms (53)
    on left: 6 7, on right: 4 5 6
ClassStm (54)
    on left: 8 9, on right: 6 7
Fun (55)
    on left: 10 11 12, on right: 8
VarType (56)
    on left: 13 14 15 16, on right: 10 11 39 40 41 42 52 53
Arrays (57)
    on left: 17 18, on right: 13 14 18
BaseStm (58)
    on left: 19, on right: 10 11 12 31 33 35 37 38
Lines (59)
    on left: 20 21, on right: 19 21
Line (60)
    on left: 22 23 24 25 26 27 28 29, on right: 20 21
BreakStm (61)
    on left: 30, on right: 28
IfStm (62)
    on left: 31 32, on right: 23 32
ELIfStm (63)
    on left: 33 34, on right: 32
ElseStm (64)
    on left: 35 36, on right: 32
WhileStm (65)
    on left: 37, on right: 24
ForStm (66)
    on left: 38, on right: 29
DeclareStm (67)
    on left: 39 40 41 42, on right: 9 26
DeclareVarStm (68)
    on left: 43 44 45, on right: 39 45
VarStm (69)
    on left: 46 47, on right: 25 40 41 42 47
ReturnStm (70)
    on left: 48 49, on right: 27
Args (71)
    on left: 50 51, on right: 10 11 12
Arg (72)
    on left: 52 53, on right: 51 53
BoolExp (73)
    on left: 54 55 56, on right: 31 37 38 65
Exp (74)
    on left: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
    75 76 77, on right: 33 38 44 46 47 49 54 55 56 62 63 64 66 67 68
    69 70 83 84 94 95
IdStm (75)
    on left: 78 79 80, on right: 61 72 73 74 75
ClassPointer (76)
    on left: 81 82, on right: 60 80
ArrayIndex (77)
    on left: 83 84, on right: 71 77 84 86
Lvalue (78)
    on left: 85 86, on right: 62
Constant (79)
    on left: 87 88 89 90, on right: 57
Call (80)
    on left: 91, on right: 58 59 60 76
CallArgs (81)
    on left: 92 93, on right: 91
CallArg (82)
    on left: 94 95, on right: 93 95
EMPTY (83)
    on left: 96, on right: 22 34 36 50 92


State 0

    0 $accept: . Program $end

    CLASS  shift, and go to state 1

    Program    go to state 2
    ClassDefs  go to state 3
    Class      go to state 4


State 1

    4 Class: CLASS . ID LC ClassStms RC
    5      | CLASS . ID EXTENDS ID LC ClassStms RC

    ID  shift, and go to state 5


State 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


State 3

    1 Program: ClassDefs .

    $default  reduce using rule 1 (Program)


State 4

    2 ClassDefs: Class .
    3          | Class . ClassDefs

    CLASS  shift, and go to state 1

    $default  reduce using rule 2 (ClassDefs)

    ClassDefs  go to state 7
    Class      go to state 4


State 5

    4 Class: CLASS ID . LC ClassStms RC
    5      | CLASS ID . EXTENDS ID LC ClassStms RC

    EXTENDS  shift, and go to state 8
    LC       shift, and go to state 9


State 6

    0 $accept: Program $end .

    $default  accept


State 7

    3 ClassDefs: Class ClassDefs .

    $default  reduce using rule 3 (ClassDefs)


State 8

    5 Class: CLASS ID EXTENDS . ID LC ClassStms RC

    ID  shift, and go to state 10


State 9

    4 Class: CLASS ID LC . ClassStms RC

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    ClassStms   go to state 15
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 10

    5 Class: CLASS ID EXTENDS ID . LC ClassStms RC

    LC  shift, and go to state 20


State 11

   11 Fun: STATIC . VarType ID LP Args RP LC BaseStm RC
   40 DeclareStm: STATIC . VarType VarStm SEMI
   42           | STATIC . FINAL VarType VarStm SEMI

    FINAL  shift, and go to state 21
    TYPE   shift, and go to state 13
    ID     shift, and go to state 22

    VarType  go to state 23


State 12

   41 DeclareStm: FINAL . VarType VarStm SEMI

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 24


State 13

   13 VarType: TYPE . Arrays
   15        | TYPE .

    ARRAY  shift, and go to state 25

    $default  reduce using rule 15 (VarType)

    Arrays  go to state 26


State 14

   12 Fun: ID . LP Args RP LC BaseStm RC
   14 VarType: ID . Arrays
   16        | ID .

    ARRAY  shift, and go to state 25
    LP     shift, and go to state 27

    $default  reduce using rule 16 (VarType)

    Arrays  go to state 28


State 15

    4 Class: CLASS ID LC ClassStms . RC

    RC  shift, and go to state 29


State 16

    6 ClassStms: ClassStm . ClassStms
    7          | ClassStm .

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    $default  reduce using rule 7 (ClassStms)

    ClassStms   go to state 30
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 17

    8 ClassStm: Fun .

    $default  reduce using rule 8 (ClassStm)


State 18

   10 Fun: VarType . ID LP Args RP LC BaseStm RC
   39 DeclareStm: VarType . DeclareVarStm SEMI

    ID  shift, and go to state 31

    DeclareVarStm  go to state 32


State 19

    9 ClassStm: DeclareStm .

    $default  reduce using rule 9 (ClassStm)


State 20

    5 Class: CLASS ID EXTENDS ID LC . ClassStms RC

    STATIC  shift, and go to state 11
    FINAL   shift, and go to state 12
    TYPE    shift, and go to state 13
    ID      shift, and go to state 14

    ClassStms   go to state 33
    ClassStm    go to state 16
    Fun         go to state 17
    VarType     go to state 18
    DeclareStm  go to state 19


State 21

   42 DeclareStm: STATIC FINAL . VarType VarStm SEMI

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 34


State 22

   14 VarType: ID . Arrays
   16        | ID .

    ARRAY  shift, and go to state 25

    $default  reduce using rule 16 (VarType)

    Arrays  go to state 28


State 23

   11 Fun: STATIC VarType . ID LP Args RP LC BaseStm RC
   40 DeclareStm: STATIC VarType . VarStm SEMI

    ID      shift, and go to state 35
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    VarStm        go to state 48
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 24

   41 DeclareStm: FINAL VarType . VarStm SEMI

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    VarStm        go to state 57
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 25

   17 Arrays: ARRAY .
   18       | ARRAY . Arrays

    ARRAY  shift, and go to state 25

    $default  reduce using rule 17 (Arrays)

    Arrays  go to state 58


State 26

   13 VarType: TYPE Arrays .

    $default  reduce using rule 13 (VarType)


State 27

   12 Fun: ID LP . Args RP LC BaseStm RC

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    $default  reduce using rule 96 (EMPTY)

    VarType  go to state 59
    Args     go to state 60
    Arg      go to state 61
    EMPTY    go to state 62


State 28

   14 VarType: ID Arrays .

    $default  reduce using rule 14 (VarType)


State 29

    4 Class: CLASS ID LC ClassStms RC .

    $default  reduce using rule 4 (Class)


State 30

    6 ClassStms: ClassStm ClassStms .

    $default  reduce using rule 6 (ClassStms)


State 31

   10 Fun: VarType ID . LP Args RP LC BaseStm RC
   43 DeclareVarStm: ID .
   44              | ID . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 63
    LP        shift, and go to state 64

    $default  reduce using rule 43 (DeclareVarStm)


State 32

   39 DeclareStm: VarType DeclareVarStm . SEMI
   45 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm

    SEMI   shift, and go to state 65
    COMMA  shift, and go to state 66


State 33

    5 Class: CLASS ID EXTENDS ID LC ClassStms . RC

    RC  shift, and go to state 67


State 34

   42 DeclareStm: STATIC FINAL VarType . VarStm SEMI

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    VarStm        go to state 68
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 35

   11 Fun: STATIC VarType ID . LP Args RP LC BaseStm RC
   59 Exp: ID . DOT Call
   71    | ID . ArrayIndex
   78 IdStm: ID .
   79      | ID . DOT ID
   85 Lvalue: ID .
   86       | ID . ArrayIndex
   91 Call: ID . LP CallArgs RP

    DOT  shift, and go to state 69
    LP   shift, and go to state 70
    LB   shift, and go to state 71

    ASSIGNOP  reduce using rule 85 (Lvalue)
    $default  reduce using rule 78 (IdStm)

    ArrayIndex  go to state 72


State 36

   70 Exp: NOT . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 73
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 37

   68 Exp: LP . Exp RP

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 74
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 38

   72 Exp: DPLUS . IdStm

    ID     shift, and go to state 75
    THIS   shift, and go to state 46
    SUPER  shift, and go to state 47

    IdStm         go to state 76
    ClassPointer  go to state 77


State 39

   74 Exp: DMINUS . IdStm

    ID     shift, and go to state 75
    THIS   shift, and go to state 46
    SUPER  shift, and go to state 47

    IdStm         go to state 78
    ClassPointer  go to state 77


State 40

   87 Constant: INT .

    $default  reduce using rule 87 (Constant)


State 41

   88 Constant: FLOAT .

    $default  reduce using rule 88 (Constant)


State 42

   90 Constant: STR .

    $default  reduce using rule 90 (Constant)


State 43

   89 Constant: BOOL .

    $default  reduce using rule 89 (Constant)


State 44

   69 Exp: MINUS . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 79
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 45

   76 Exp: NEW . Call
   77    | NEW . TYPE ArrayIndex

    TYPE  shift, and go to state 80
    ID    shift, and go to state 81

    Call  go to state 82


State 46

   81 ClassPointer: THIS .

    $default  reduce using rule 81 (ClassPointer)


State 47

   82 ClassPointer: SUPER .

    $default  reduce using rule 82 (ClassPointer)


State 48

   40 DeclareStm: STATIC VarType VarStm . SEMI

    SEMI  shift, and go to state 83


State 49

   65 Exp: BoolExp .

    $default  reduce using rule 65 (Exp)


State 50

   46 VarStm: Exp .
   47       | Exp . COMMA VarStm
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    COMMA  shift, and go to state 84
    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91

    $default  reduce using rule 46 (VarStm)


State 51

   61 Exp: IdStm .
   73    | IdStm . DPLUS
   75    | IdStm . DMINUS

    DPLUS   shift, and go to state 92
    DMINUS  shift, and go to state 93

    $default  reduce using rule 61 (Exp)


State 52

   60 Exp: ClassPointer . DOT Call
   80 IdStm: ClassPointer . DOT ID

    DOT  shift, and go to state 94


State 53

   62 Exp: Lvalue . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 95


State 54

   57 Exp: Constant .

    $default  reduce using rule 57 (Exp)


State 55

   58 Exp: Call .

    $default  reduce using rule 58 (Exp)


State 56

   59 Exp: ID . DOT Call
   71    | ID . ArrayIndex
   78 IdStm: ID .
   79      | ID . DOT ID
   85 Lvalue: ID .
   86       | ID . ArrayIndex
   91 Call: ID . LP CallArgs RP

    DOT  shift, and go to state 69
    LP   shift, and go to state 96
    LB   shift, and go to state 71

    ASSIGNOP  reduce using rule 85 (Lvalue)
    $default  reduce using rule 78 (IdStm)

    ArrayIndex  go to state 72


State 57

   41 DeclareStm: FINAL VarType VarStm . SEMI

    SEMI  shift, and go to state 97


State 58

   18 Arrays: ARRAY Arrays .

    $default  reduce using rule 18 (Arrays)


State 59

   52 Arg: VarType . ID
   53    | VarType . ID COMMA Arg

    ID  shift, and go to state 98


State 60

   12 Fun: ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 99


State 61

   51 Args: Arg .

    $default  reduce using rule 51 (Args)


State 62

   50 Args: EMPTY .

    $default  reduce using rule 50 (Args)


State 63

   44 DeclareVarStm: ID ASSIGNOP . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 100
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 64

   10 Fun: VarType ID LP . Args RP LC BaseStm RC

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    $default  reduce using rule 96 (EMPTY)

    VarType  go to state 59
    Args     go to state 101
    Arg      go to state 61
    EMPTY    go to state 62


State 65

   39 DeclareStm: VarType DeclareVarStm SEMI .

    $default  reduce using rule 39 (DeclareStm)


State 66

   45 DeclareVarStm: DeclareVarStm COMMA . DeclareVarStm

    ID  shift, and go to state 102

    DeclareVarStm  go to state 103


State 67

    5 Class: CLASS ID EXTENDS ID LC ClassStms RC .

    $default  reduce using rule 5 (Class)


State 68

   42 DeclareStm: STATIC FINAL VarType VarStm . SEMI

    SEMI  shift, and go to state 104


State 69

   59 Exp: ID DOT . Call
   79 IdStm: ID DOT . ID

    ID  shift, and go to state 105

    Call  go to state 106


State 70

   11 Fun: STATIC VarType ID LP . Args RP LC BaseStm RC
   91 Call: ID LP . CallArgs RP

    TYPE    shift, and go to state 13
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 59
    Args          go to state 108
    Arg           go to state 61
    BoolExp       go to state 49
    Exp           go to state 109
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    CallArgs      go to state 110
    CallArg       go to state 111
    EMPTY         go to state 112


State 71

   83 ArrayIndex: LB . Exp RB
   84           | LB . Exp RB ArrayIndex

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 113
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 72

   71 Exp: ID ArrayIndex .
   86 Lvalue: ID ArrayIndex .

    ASSIGNOP  reduce using rule 86 (Lvalue)
    $default  reduce using rule 71 (Exp)


State 73

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   70    | NOT Exp .

    $default  reduce using rule 70 (Exp)


State 74

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   68    | LP Exp . RP

    RELOP  shift, and go to state 85
    RP     shift, and go to state 114
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 75

   78 IdStm: ID .
   79      | ID . DOT ID

    DOT  shift, and go to state 115

    $default  reduce using rule 78 (IdStm)


State 76

   72 Exp: DPLUS IdStm .

    $default  reduce using rule 72 (Exp)


State 77

   80 IdStm: ClassPointer . DOT ID

    DOT  shift, and go to state 116


State 78

   74 Exp: DMINUS IdStm .

    $default  reduce using rule 74 (Exp)


State 79

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   69    | MINUS Exp .

    STAR  shift, and go to state 88
    DIV   shift, and go to state 89

    $default  reduce using rule 69 (Exp)


State 80

   77 Exp: NEW TYPE . ArrayIndex

    LB  shift, and go to state 71

    ArrayIndex  go to state 117


State 81

   91 Call: ID . LP CallArgs RP

    LP  shift, and go to state 96


State 82

   76 Exp: NEW Call .

    $default  reduce using rule 76 (Exp)


State 83

   40 DeclareStm: STATIC VarType VarStm SEMI .

    $default  reduce using rule 40 (DeclareStm)


State 84

   47 VarStm: Exp COMMA . VarStm

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    VarStm        go to state 118
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 85

   54 BoolExp: Exp RELOP . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 119
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 86

   63 Exp: Exp PLUS . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 120
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 87

   64 Exp: Exp MINUS . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 121
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 88

   66 Exp: Exp STAR . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 122
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 89

   67 Exp: Exp DIV . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 123
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 90

   56 BoolExp: Exp OR . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 124
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 91

   55 BoolExp: Exp AND . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 125
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 92

   73 Exp: IdStm DPLUS .

    $default  reduce using rule 73 (Exp)


State 93

   75 Exp: IdStm DMINUS .

    $default  reduce using rule 75 (Exp)


State 94

   60 Exp: ClassPointer DOT . Call
   80 IdStm: ClassPointer DOT . ID

    ID  shift, and go to state 126

    Call  go to state 127


State 95

   62 Exp: Lvalue ASSIGNOP . Exp

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 128
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 96

   91 Call: ID LP . CallArgs RP

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    $default  reduce using rule 96 (EMPTY)

    BoolExp       go to state 49
    Exp           go to state 109
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    CallArgs      go to state 110
    CallArg       go to state 111
    EMPTY         go to state 129


State 97

   41 DeclareStm: FINAL VarType VarStm SEMI .

    $default  reduce using rule 41 (DeclareStm)


State 98

   52 Arg: VarType ID .
   53    | VarType ID . COMMA Arg

    COMMA  shift, and go to state 130

    $default  reduce using rule 52 (Arg)


State 99

   12 Fun: ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 131


State 100

   44 DeclareVarStm: ID ASSIGNOP Exp .
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91

    $default  reduce using rule 44 (DeclareVarStm)


State 101

   10 Fun: VarType ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 132


State 102

   43 DeclareVarStm: ID .
   44              | ID . ASSIGNOP Exp

    ASSIGNOP  shift, and go to state 63

    $default  reduce using rule 43 (DeclareVarStm)


State 103

   45 DeclareVarStm: DeclareVarStm . COMMA DeclareVarStm
   45              | DeclareVarStm COMMA DeclareVarStm .

    COMMA  shift, and go to state 66

    COMMA     [reduce using rule 45 (DeclareVarStm)]
    $default  reduce using rule 45 (DeclareVarStm)


State 104

   42 DeclareStm: STATIC FINAL VarType VarStm SEMI .

    $default  reduce using rule 42 (DeclareStm)


State 105

   79 IdStm: ID DOT ID .
   91 Call: ID . LP CallArgs RP

    LP  shift, and go to state 96

    $default  reduce using rule 79 (IdStm)


State 106

   59 Exp: ID DOT Call .

    $default  reduce using rule 59 (Exp)


State 107

   14 VarType: ID . Arrays
   16        | ID .
   59 Exp: ID . DOT Call
   71    | ID . ArrayIndex
   78 IdStm: ID .
   79      | ID . DOT ID
   85 Lvalue: ID .
   86       | ID . ArrayIndex
   91 Call: ID . LP CallArgs RP

    ARRAY  shift, and go to state 25
    DOT    shift, and go to state 69
    LP     shift, and go to state 96
    LB     shift, and go to state 71

    ID        reduce using rule 16 (VarType)
    ASSIGNOP  reduce using rule 85 (Lvalue)
    $default  reduce using rule 78 (IdStm)

    Arrays      go to state 28
    ArrayIndex  go to state 72


State 108

   11 Fun: STATIC VarType ID LP Args . RP LC BaseStm RC

    RP  shift, and go to state 133


State 109

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   94 CallArg: Exp .
   95        | Exp . COMMA CallArg

    COMMA  shift, and go to state 134
    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91

    $default  reduce using rule 94 (CallArg)


State 110

   91 Call: ID LP CallArgs . RP

    RP  shift, and go to state 135


State 111

   93 CallArgs: CallArg .

    $default  reduce using rule 93 (CallArgs)


State 112

   50 Args: EMPTY .
   92 CallArgs: EMPTY .

    RP        reduce using rule 50 (Args)
    RP        [reduce using rule 92 (CallArgs)]
    $default  reduce using rule 50 (Args)


State 113

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   83 ArrayIndex: LB Exp . RB
   84           | LB Exp . RB ArrayIndex

    RELOP  shift, and go to state 85
    RB     shift, and go to state 136
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 114

   68 Exp: LP Exp RP .

    $default  reduce using rule 68 (Exp)


State 115

   79 IdStm: ID DOT . ID

    ID  shift, and go to state 137


State 116

   80 IdStm: ClassPointer DOT . ID

    ID  shift, and go to state 138


State 117

   77 Exp: NEW TYPE ArrayIndex .

    $default  reduce using rule 77 (Exp)


State 118

   47 VarStm: Exp COMMA VarStm .

    $default  reduce using rule 47 (VarStm)


State 119

   54 BoolExp: Exp . RELOP Exp
   54        | Exp RELOP Exp .
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89

    $default  reduce using rule 54 (BoolExp)


State 120

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   63    | Exp PLUS Exp .
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    STAR  shift, and go to state 88
    DIV   shift, and go to state 89

    $default  reduce using rule 63 (Exp)


State 121

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   64    | Exp MINUS Exp .
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    STAR  shift, and go to state 88
    DIV   shift, and go to state 89

    $default  reduce using rule 64 (Exp)


State 122

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   66    | Exp STAR Exp .
   67    | Exp . DIV Exp

    $default  reduce using rule 66 (Exp)


State 123

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp
   67    | Exp DIV Exp .

    $default  reduce using rule 67 (Exp)


State 124

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   56        | Exp OR Exp .
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    AND    shift, and go to state 91

    $default  reduce using rule 56 (BoolExp)


State 125

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   55        | Exp AND Exp .
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89

    $default  reduce using rule 55 (BoolExp)


State 126

   80 IdStm: ClassPointer DOT ID .
   91 Call: ID . LP CallArgs RP

    LP  shift, and go to state 96

    $default  reduce using rule 80 (IdStm)


State 127

   60 Exp: ClassPointer DOT Call .

    $default  reduce using rule 60 (Exp)


State 128

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   62 Exp: Lvalue ASSIGNOP Exp .
   63    | Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91

    $default  reduce using rule 62 (Exp)


State 129

   92 CallArgs: EMPTY .

    $default  reduce using rule 92 (CallArgs)


State 130

   53 Arg: VarType ID COMMA . Arg

    TYPE  shift, and go to state 13
    ID    shift, and go to state 22

    VarType  go to state 59
    Arg      go to state 139


State 131

   12 Fun: ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 147
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 132

   10 Fun: VarType ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 158


State 133

   11 Fun: STATIC VarType ID LP Args RP . LC BaseStm RC

    LC  shift, and go to state 159


State 134

   95 CallArg: Exp COMMA . CallArg

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 109
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    CallArg       go to state 160


State 135

   91 Call: ID LP CallArgs RP .

    $default  reduce using rule 91 (Call)


State 136

   83 ArrayIndex: LB Exp RB .
   84           | LB Exp RB . ArrayIndex

    LB  shift, and go to state 71

    $default  reduce using rule 83 (ArrayIndex)

    ArrayIndex  go to state 161


State 137

   79 IdStm: ID DOT ID .

    $default  reduce using rule 79 (IdStm)


State 138

   80 IdStm: ClassPointer DOT ID .

    $default  reduce using rule 80 (IdStm)


State 139

   53 Arg: VarType ID COMMA Arg .

    $default  reduce using rule 53 (Arg)


State 140

   40 DeclareStm: STATIC . VarType VarStm SEMI
   42           | STATIC . FINAL VarType VarStm SEMI

    FINAL  shift, and go to state 21
    TYPE   shift, and go to state 13
    ID     shift, and go to state 22

    VarType  go to state 162


State 141

   30 BreakStm: BREAK . SEMI

    SEMI  shift, and go to state 163


State 142

   48 ReturnStm: RETURN . SEMI
   49          | RETURN . Exp SEMI

    ID      shift, and go to state 56
    SEMI    shift, and go to state 164
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 165
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 143

   31 IfStm: IF . LP BoolExp RP LC BaseStm RC

    LP  shift, and go to state 166


State 144

   38 ForStm: FOR . LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

    LP  shift, and go to state 167


State 145

   37 WhileStm: WHILE . LP BoolExp RP LC BaseStm RC

    LP  shift, and go to state 168


State 146

   39 DeclareStm: VarType . DeclareVarStm SEMI

    ID  shift, and go to state 102

    DeclareVarStm  go to state 32


State 147

   12 Fun: ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 169


State 148

   19 BaseStm: Lines .

    $default  reduce using rule 19 (BaseStm)


State 149

   20 Lines: Line .
   21      | Line . Lines

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    RC        reduce using rule 20 (Lines)
    RC        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 20 (Lines)

    VarType       go to state 146
    Lines         go to state 170
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 150

   28 Line: BreakStm .

    $default  reduce using rule 28 (Line)


State 151

   23 Line: IfStm .
   32 IfStm: IfStm . ELIfStm ElseStm

    ELIF  shift, and go to state 171

    STATIC    reduce using rule 23 (Line)
    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     reduce using rule 23 (Line)
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     reduce using rule 23 (Line)
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      reduce using rule 23 (Line)
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    reduce using rule 23 (Line)
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        reduce using rule 23 (Line)
    IF        [reduce using rule 96 (EMPTY)]
    ELSE      reduce using rule 96 (EMPTY)
    ELIF      [reduce using rule 96 (EMPTY)]
    FOR       reduce using rule 23 (Line)
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     reduce using rule 23 (Line)
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        reduce using rule 23 (Line)
    ID        [reduce using rule 96 (EMPTY)]
    NOT       reduce using rule 23 (Line)
    NOT       [reduce using rule 96 (EMPTY)]
    LP        reduce using rule 23 (Line)
    LP        [reduce using rule 96 (EMPTY)]
    RC        reduce using rule 23 (Line)
    RC        [reduce using rule 96 (EMPTY)]
    DPLUS     reduce using rule 23 (Line)
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    reduce using rule 23 (Line)
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       reduce using rule 23 (Line)
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     reduce using rule 23 (Line)
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       reduce using rule 23 (Line)
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      reduce using rule 23 (Line)
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     reduce using rule 23 (Line)
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       reduce using rule 23 (Line)
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      reduce using rule 23 (Line)
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     reduce using rule 23 (Line)
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 23 (Line)

    ELIfStm  go to state 172
    EMPTY    go to state 173


State 152

   24 Line: WhileStm .

    $default  reduce using rule 24 (Line)


State 153

   29 Line: ForStm .

    $default  reduce using rule 29 (Line)


State 154

   26 Line: DeclareStm .

    $default  reduce using rule 26 (Line)


State 155

   25 Line: VarStm . SEMI

    SEMI  shift, and go to state 174


State 156

   27 Line: ReturnStm .

    $default  reduce using rule 27 (Line)


State 157

   22 Line: EMPTY .

    $default  reduce using rule 22 (Line)


State 158

   10 Fun: VarType ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 175
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 159

   11 Fun: STATIC VarType ID LP Args RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 176
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 160

   95 CallArg: Exp COMMA CallArg .

    $default  reduce using rule 95 (CallArg)


State 161

   84 ArrayIndex: LB Exp RB ArrayIndex .

    $default  reduce using rule 84 (ArrayIndex)


State 162

   40 DeclareStm: STATIC VarType . VarStm SEMI

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    VarStm        go to state 48
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 163

   30 BreakStm: BREAK SEMI .

    $default  reduce using rule 30 (BreakStm)


State 164

   48 ReturnStm: RETURN SEMI .

    $default  reduce using rule 48 (ReturnStm)


State 165

   49 ReturnStm: RETURN Exp . SEMI
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    SEMI   shift, and go to state 177
    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 166

   31 IfStm: IF LP . BoolExp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 178
    Exp           go to state 179
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 167

   38 ForStm: FOR LP . Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 180
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 168

   37 WhileStm: WHILE LP . BoolExp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 181
    Exp           go to state 179
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 169

   12 Fun: ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 12 (Fun)


State 170

   21 Lines: Line Lines .

    $default  reduce using rule 21 (Lines)


State 171

   33 ELIfStm: ELIF . LP Exp RP LC BaseStm RC

    LP  shift, and go to state 182


State 172

   32 IfStm: IfStm ELIfStm . ElseStm

    ELSE  shift, and go to state 183

    ELSE      [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    ElseStm  go to state 184
    EMPTY    go to state 185


State 173

   34 ELIfStm: EMPTY .

    $default  reduce using rule 34 (ELIfStm)


State 174

   25 Line: VarStm SEMI .

    $default  reduce using rule 25 (Line)


State 175

   10 Fun: VarType ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 186


State 176

   11 Fun: STATIC VarType ID LP Args RP LC BaseStm . RC

    RC  shift, and go to state 187


State 177

   49 ReturnStm: RETURN Exp SEMI .

    $default  reduce using rule 49 (ReturnStm)


State 178

   31 IfStm: IF LP BoolExp . RP LC BaseStm RC
   65 Exp: BoolExp .

    RP  shift, and go to state 188

    $default  reduce using rule 65 (Exp)


State 179

   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 180

   38 ForStm: FOR LP Exp . SEMI BoolExp SEMI Exp RP LC BaseStm RC
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    SEMI   shift, and go to state 189
    RELOP  shift, and go to state 85
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 181

   37 WhileStm: WHILE LP BoolExp . RP LC BaseStm RC
   65 Exp: BoolExp .

    RP  shift, and go to state 190

    $default  reduce using rule 65 (Exp)


State 182

   33 ELIfStm: ELIF LP . Exp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 191
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 183

   35 ElseStm: ELSE . LC BaseStm RC

    LC  shift, and go to state 192


State 184

   32 IfStm: IfStm ELIfStm ElseStm .

    $default  reduce using rule 32 (IfStm)


State 185

   36 ElseStm: EMPTY .

    $default  reduce using rule 36 (ElseStm)


State 186

   10 Fun: VarType ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 10 (Fun)


State 187

   11 Fun: STATIC VarType ID LP Args RP LC BaseStm RC .

    $default  reduce using rule 11 (Fun)


State 188

   31 IfStm: IF LP BoolExp RP . LC BaseStm RC

    LC  shift, and go to state 193


State 189

   38 ForStm: FOR LP Exp SEMI . BoolExp SEMI Exp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 194
    Exp           go to state 179
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 190

   37 WhileStm: WHILE LP BoolExp RP . LC BaseStm RC

    LC  shift, and go to state 195


State 191

   33 ELIfStm: ELIF LP Exp . RP LC BaseStm RC
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    RP     shift, and go to state 196
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 192

   35 ElseStm: ELSE LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 197
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 193

   31 IfStm: IF LP BoolExp RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 198
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 194

   38 ForStm: FOR LP Exp SEMI BoolExp . SEMI Exp RP LC BaseStm RC
   65 Exp: BoolExp .

    SEMI  shift, and go to state 199

    $default  reduce using rule 65 (Exp)


State 195

   37 WhileStm: WHILE LP BoolExp RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 200
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 196

   33 ELIfStm: ELIF LP Exp RP . LC BaseStm RC

    LC  shift, and go to state 201


State 197

   35 ElseStm: ELSE LC BaseStm . RC

    RC  shift, and go to state 202


State 198

   31 IfStm: IF LP BoolExp RP LC BaseStm . RC

    RC  shift, and go to state 203


State 199

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI . Exp RP LC BaseStm RC

    ID      shift, and go to state 56
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    BoolExp       go to state 49
    Exp           go to state 204
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55


State 200

   37 WhileStm: WHILE LP BoolExp RP LC BaseStm . RC

    RC  shift, and go to state 205


State 201

   33 ELIfStm: ELIF LP Exp RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 206
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 202

   35 ElseStm: ELSE LC BaseStm RC .

    $default  reduce using rule 35 (ElseStm)


State 203

   31 IfStm: IF LP BoolExp RP LC BaseStm RC .

    $default  reduce using rule 31 (IfStm)


State 204

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp . RP LC BaseStm RC
   54 BoolExp: Exp . RELOP Exp
   55        | Exp . AND Exp
   56        | Exp . OR Exp
   63 Exp: Exp . PLUS Exp
   64    | Exp . MINUS Exp
   66    | Exp . STAR Exp
   67    | Exp . DIV Exp

    RELOP  shift, and go to state 85
    RP     shift, and go to state 207
    PLUS   shift, and go to state 86
    MINUS  shift, and go to state 87
    STAR   shift, and go to state 88
    DIV    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91


State 205

   37 WhileStm: WHILE LP BoolExp RP LC BaseStm RC .

    $default  reduce using rule 37 (WhileStm)


State 206

   33 ELIfStm: ELIF LP Exp RP LC BaseStm . RC

    RC  shift, and go to state 208


State 207

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP . LC BaseStm RC

    LC  shift, and go to state 209


State 208

   33 ELIfStm: ELIF LP Exp RP LC BaseStm RC .

    $default  reduce using rule 33 (ELIfStm)


State 209

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC . BaseStm RC

    STATIC  shift, and go to state 140
    FINAL   shift, and go to state 12
    BREAK   shift, and go to state 141
    TYPE    shift, and go to state 13
    RETURN  shift, and go to state 142
    IF      shift, and go to state 143
    FOR     shift, and go to state 144
    WHILE   shift, and go to state 145
    ID      shift, and go to state 107
    NOT     shift, and go to state 36
    LP      shift, and go to state 37
    DPLUS   shift, and go to state 38
    DMINUS  shift, and go to state 39
    INT     shift, and go to state 40
    FLOAT   shift, and go to state 41
    STR     shift, and go to state 42
    BOOL    shift, and go to state 43
    MINUS   shift, and go to state 44
    NEW     shift, and go to state 45
    THIS    shift, and go to state 46
    SUPER   shift, and go to state 47

    STATIC    [reduce using rule 96 (EMPTY)]
    FINAL     [reduce using rule 96 (EMPTY)]
    BREAK     [reduce using rule 96 (EMPTY)]
    TYPE      [reduce using rule 96 (EMPTY)]
    RETURN    [reduce using rule 96 (EMPTY)]
    IF        [reduce using rule 96 (EMPTY)]
    FOR       [reduce using rule 96 (EMPTY)]
    WHILE     [reduce using rule 96 (EMPTY)]
    ID        [reduce using rule 96 (EMPTY)]
    NOT       [reduce using rule 96 (EMPTY)]
    LP        [reduce using rule 96 (EMPTY)]
    DPLUS     [reduce using rule 96 (EMPTY)]
    DMINUS    [reduce using rule 96 (EMPTY)]
    INT       [reduce using rule 96 (EMPTY)]
    FLOAT     [reduce using rule 96 (EMPTY)]
    STR       [reduce using rule 96 (EMPTY)]
    BOOL      [reduce using rule 96 (EMPTY)]
    MINUS     [reduce using rule 96 (EMPTY)]
    NEW       [reduce using rule 96 (EMPTY)]
    THIS      [reduce using rule 96 (EMPTY)]
    SUPER     [reduce using rule 96 (EMPTY)]
    $default  reduce using rule 96 (EMPTY)

    VarType       go to state 146
    BaseStm       go to state 210
    Lines         go to state 148
    Line          go to state 149
    BreakStm      go to state 150
    IfStm         go to state 151
    WhileStm      go to state 152
    ForStm        go to state 153
    DeclareStm    go to state 154
    VarStm        go to state 155
    ReturnStm     go to state 156
    BoolExp       go to state 49
    Exp           go to state 50
    IdStm         go to state 51
    ClassPointer  go to state 52
    Lvalue        go to state 53
    Constant      go to state 54
    Call          go to state 55
    EMPTY         go to state 157


State 210

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm . RC

    RC  shift, and go to state 211


State 211

   38 ForStm: FOR LP Exp SEMI BoolExp SEMI Exp RP LC BaseStm RC .

    $default  reduce using rule 38 (ForStm)
